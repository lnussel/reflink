#!/bin/bash
set -e
force=
if [ -n "%1" -a "$1" = "--force" ]; then
	force=1
	shift
fi

test -d websolv || { echo "need to clone websolv first" >&2; false; }

cleanup()
{
	if [ -n "$version" ]; then
		echo "$version is incomplete"
		[ -e "data/$version/.download.log" ] && grep ERROR "data/$version/.download.log"
		rm -r "data/$version"/packages
	fi
}
trap cleanup EXIT
wantversion="$1"
URL="http://download.opensuse.org/history"
versions=($(curl --fail --silent $URL/list))
mkdir -p data/pool
for version in "${versions[@]}"; do
	[ -n "$wantversion" ] && [ "$version" != "$wantversion" ] && continue
	[ -z "$force" ] && [ -d "data/$version" ] && continue
	mkdir -p data/$version/packages
	websolv/Deptool.py -C "Tumbleweed-$version" parse small_bootable.t --metalink > data/$version/.packages.meta4
	while read file; do
		[ -e "data/pool/${file##*/}" ] || continue
		mkdir -p "data/$version/packages/${file%/*}"
		ln -f "data/pool/${file##*/}" "data/$version/packages/$file"
	done < <(sed -ne 's/.*file name="\([^"]\+\)".*/\1/p' data/$version/.packages.meta4)
	aria2c -q --continue -M data/$version/.packages.meta4 -d data/$version/packages -l "data/$version/.download.log" --log-level info
	du -sh data/$version
	while read file; do
		ln "$file" "data/pool/${file##*/}"
	done < <(find "data/$version" -type f -links 1 -name '*.rpm')
	[ -z "$wantversion" ] || break
done
unset version
