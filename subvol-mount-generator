#!/bin/bash
output="${1:?}"

generate_sysimage_mount() {
	read -r usrdev usrsubvol < <(findmnt -no SOURCE /usr|sed -e 's/\(.*\)\[\/\(.*\)\]/\1 \2/')
	sysimagesubvol="${usrsubvol/@auto\/usr-/@auto/sysimage-}" 

	[ "$sysimagesubvol" != "$usrsubvol" ] || return

	cat > "$output/usr-lib-sysimage.mount" <<-EOF
	# Automatically generated by ${0##*/}

	[Unit]
	Documentation=man:fstab(5)
	Before=local-fs.target
	After=usr.mount

	[Mount]
	What=$usrdev
	Where=/usr/lib/sysimage
	Type=btrfs
	Options=subvol=$sysimagesubvol
	EOF

	mkdir -p "$output/local-fs.target.requires"
	ln -s ../usr-lib-sysimage.mount "$output/local-fs.target.requires"
}

generate_var_mount() {
	read -r rootdev rootsubvol rootname < <(findmnt -no SOURCE /|sed -e 's/\(.\+\)\[\/\(@auto\/root-.\+:\([^@]\+\)@.\+\)\]/\1 \2 \3/')

	[ -n "$rootname" ] || return

	varsubvol="@auto/var-$rootname"

	cat > "$output/var.mount" <<-EOF
	# Automatically generated by ${0##*/}

	[Unit]
	Documentation=man:fstab(5)
	Before=local-fs.target
	After=usr.mount

	[Mount]
	What=$usrdev
	Where=/var
	Type=btrfs
	Options=subvol=$varsubvol
	EOF
}

if mountpoint -q /usr; then
	generate_sysimage_mount
fi

# XXX: how does this work with gpt generator if /var is gpt?
if ! mountpoint -q /var && ! [ -e "$output/var.mount" ]; then
	generate_var_mount
fi
